<?php

/**
 * @file
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\field\FieldConfigInterface;
use Drupal\field\FieldStorageConfigInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;

/**
 * Implements hook_entity_presave().
 */
function google_vision_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'file') {
    $mimetype = $entity->get('filemime')->getValue()[0]['value'];
    // If it's image.
    if (in_array($mimetype, ['image/jpeg', 'image/png', 'image/jpg'])) {
      // Try to find fields which should be used for Google labels.
      foreach ($entity->getFieldDefinitions() as $field) {
        // If this field is reference to taxonomy term.
        if ($field->getType() == 'entity_reference'
          && $field->getSettings()['target_type'] == 'taxonomy_term'
          && !empty($field->getSettings()['handler_settings']['target_bundles'])) {
          // If google vision is enabled for this field.
          $settings = $field->getThirdPartySettings('google_vision');
          if (!empty($settings['google_vision'])) {
            // Take first referenced vocabulary.
            $vid = reset($field->getSettings()['handler_settings']['target_bundles']);
            google_vision_file_entity_add_labels($entity, $field, $vid);
          }
        }
        // If this field is the alt text field.
        if ($field->getName() == 'field_image_alt_text') {
          $value = $entity->get($field->getName())->getValue();
          //Set the Alt Text using Vision API.
          if (empty($value)) {
            google_vision_set_alt_text($entity, $field);
          }
          else {
            //Change the alt text if required.
            google_vision_edit_alt_text($entity, $field, $value);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function google_vision_form_field_config_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $field_entity = $form_state->getFormObject()->getEntity();
  // If this field is reference to taxonomy vocabulary.
  if ($field_entity->getType() == 'entity_reference' && $field_entity->getSettings()['target_type'] == 'taxonomy_term') {
    $settings = $form_state->getFormObject()->getEntity()->getThirdPartySettings('google_vision');
    $form['google_vision'] = [
      '#type' => 'checkbox',
      '#title' => 'Enable Google Vision',
      '#default_value' => !empty($settings['google_vision']) ? $settings['google_vision'] : FALSE,
    ];

    $form['#entity_builders'][] = 'google_vision_form_field_config_form_taxonomy_builder';
  }

  if($field_entity->getType() == 'image') {
    $settings = $form_state->getFormObject()->getEntity()->getThirdPartySettings('google_vision');
    $form['safe_search'] = [
      '#type' => 'checkbox',
      '#title' => t('Enable Safe Search'),
      '#description' => t('Detects and avoids explicit contents.'),
      '#default_value' => !empty($settings['safe_search']) ? $settings['safe_search'] : FALSE,
    ];
    $form['emotion_detect'] = [
      '#type' => 'checkbox',
      '#title' => t('Enable Emotion Detection'),
      '#description' => t('Detects and notifies if the image is a happy one.'),
      '#default_value' => !empty($settings['emotion_detect']) ? $settings['emotion_detect'] : FALSE,
    ];

    $form['#entity_builders'][] = 'google_vision_form_field_config_form_image_builder';
  }
  // If this field is the alt text field.
  if ($field_entity->getName() == 'field_image_alt_text') {
    $settings = $form_state->getFormObject()
      ->getEntity()
      ->getThirdPartySettings('google_vision');
    $form['fill_alt'] = [
      '#type' => 'details',
      '#title' => t('Fill Alt Text by'),
      '#open' => TRUE,
    ];
    $form['fill_alt']['alt_auto_filling'] = [
      '#type' => 'radios',
      '#title' => t('Detection Type'),
      '#title_display' => 'invisible',
      '#options' => [
        'labels' => t('Label Detection'),
        'landmark' => t('Landmark Detection'),
        'logo' => t('Logo Detection'),
        'ocr' => t('Optical Character Detection'),
        'none' => t('None'),
      ],
      '#default_value' => !empty($settings['alt_auto_filling']) ? $settings['alt_auto_filling'] : FALSE,
    ];

    $form['#entity_builders'][] = 'google_vision_form_field_config_form_alt_text_builder';
  }
}

/**
 * Form builder to save the settings for entity reference.
 */
function google_vision_form_field_config_form_taxonomy_builder($entity_type, FieldConfigInterface $type, &$form, FormStateInterface $form_state) {
  $type->setThirdPartySetting('google_vision', 'google_vision', $form_state->getValue('google_vision'));
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function google_vision_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  foreach ($fields as $field) {
    if ($field->getType() == 'image') {
      $fields[$field->getName()]->addConstraint('SafeSearch');
      $fields[$field->getName()]->addConstraint('UserEmotion');
    }
  }
}

/**
 * Form builder to save the settings for images.
 */
function google_vision_form_field_config_form_image_builder($entity_type, FieldConfigInterface $type, &$form, FormStateInterface $form_state) {
  $type->setThirdPartySetting('google_vision', 'safe_search', $form_state->getValue('safe_search'));
  $type->setThirdPartySetting('google_vision', 'emotion_detect', $form_state->getValue('emotion_detect'));
}

/**
 * Form builder to save the settings for the alt text of image file.
 */
function google_vision_form_field_config_form_alt_text_builder($entity_type, FieldConfigInterface $type, &$form, FormStateInterface $form_state) {
  $type->setThirdPartySetting('google_vision', 'alt_auto_filling', $form_state->getValue('alt_auto_filling'));
}

/**
 * Try to get and add labels for the file entity.
 */
function google_vision_file_entity_add_labels($file, $field, $vid) {
  // Try to retrieve file URI.
  $file_uri = $file->getFileUri();
  if ($filepath = \Drupal::service('file_system')->realpath($file_uri)) {
    $data = \Drupal::service('google_vision.api')->labelDetection($filepath);;
    // If we have retrieved labels.
    if (!empty($data['responses'][0]['labelAnnotations'])) {
      $labels = [];
      foreach ($data['responses'][0]['labelAnnotations'] as $item) {
        $labels[] = $item['description'];
      }

      // Get existing values from field.
      $values = $file->get($field->getName())->getValue();
      $taxonomy_term_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');

      // Try to find an existing terms by these labels.
      $query = \Drupal::database()->select('taxonomy_term_field_data', 'tfd');
      $query->fields('tfd', ['tid', 'name']);
      $query->condition('tfd.vid', $vid);
      $query->condition('tfd.name', $labels, 'IN');
      $existing_terms = $query->execute()->fetchAllKeyed();

      // Handle retrieved labels.
      foreach ($labels as $label) {
        // Use existing term.
        if ($existing_tid = array_search($label, $existing_terms)) {
          $already_have = FALSE;
          // If we already have this label in this field. Just skip.
          foreach ($values as $value) {
            if ($value['target_id'] == $existing_tid) {
              $already_have = TRUE;
            }
          }
          // Add existing label into field if we haven't it yet.
          if (!$already_have) {
            $values[] = ['target_id' => $existing_tid];
          }
        }
        // Create new term and add into field.
        else {
          $label_term = $taxonomy_term_storage->create([
            'name' => $label,
            'vid' => $vid
          ]);
          $label_term->enforceIsNew();
          $label_term->save();
          $values[] = ['target_id' => $label_term->id()];
        }
      }
      // Save collected values.
      $file->set($field->getName(), $values);
    }
  }
}

/**
 * Set the value for the alternative text field of the image file.
 */
function google_vision_set_alt_text($entity, $field) {
  // Initialize the output.
  $output = '';
  $settings = $field->getThirdPartySettings('google_vision');
  if (!empty($settings['alt_auto_filling'])) {
    $option = $settings['alt_auto_filling'];

    $file_uri = $entity->getFileUri();
    if ($filepath = \Drupal::service('file_system')->realpath($file_uri)) {
      $gv_service = \Drupal::service('google_vision.api');
      switch ($option) {
        case 'labels':
          $data = $gv_service->labelDetection($filepath);
          // If we have retrieved labels.
          if (!empty($data['responses'][0]['labelAnnotations'])) {
            $output = $data['responses'][0]['labelAnnotations'];
          }
          break;
        case 'landmark':
          $data = $gv_service->landmarkDetection($filepath);
          // If we have retrieved landmark.
          if (!empty($data['responses'][0]['landmarkAnnotations'])) {
            $output = $data['responses'][0]['landmarkAnnotations'];
          }
          break;

        case 'logo':
          $data = $gv_service->logoDetection($filepath);
          // If we have retrieved logo.
          if (!empty($data['responses'][0]['logoAnnotations'])) {
            $output = $data['responses'][0]['logoAnnotations'];
          }
          break;

        case 'ocr':
          $data = $gv_service->opticalCharacterRecognition($filepath);
          // If we have retrieved character.
          if (!empty($data['responses'][0]['textAnnotations'])) {
            $output = $data['responses'][0]['textAnnotations'];
          }
          break;

        case 'none':
          // If none is selected, do nothing.
          break;
      }
    }
    // If we have some data.
    if (!empty($output)) {
      // Grab first value (most relevant) and use it.
      $value = reset($output)['description'];
      $entity->set($field->getName(), $value);
    }
  }
}

/**
 * Edit the current value of the Alt Text field of the image file.
 */
function google_vision_edit_alt_text($entity, $field, $value) {
  //Set the new value to the Alt Text field.
  $entity->set($field->getName(), $value);
}
