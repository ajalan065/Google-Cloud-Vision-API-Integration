<?php

/**
 * @file
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\field\FieldConfigInterface;
use Drupal\google_vision\GoogleVisionAPI;
use Drupal\field\FieldStorageConfigInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;

/**
 * Implements hook_entity_presave().
 */
function google_vision_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'file') {
    $mimetype = $entity->get('filemime')->getValue()[0]['value'];
    // If it's image.
    if (in_array($mimetype, ['image/jpeg', 'image/png', 'image/jpg'])) {
      // Try to find fields which should be used for Google labels.
      foreach ($entity->getFieldDefinitions() as $field) {
        // If this field is reference to taxonomy term.
        if ($field->getType() == 'entity_reference'
          && $field->getSettings()['target_type'] == 'taxonomy_term'
          && !empty($field->getSettings()['handler_settings']['target_bundles'])) {
          // If google vision is enabled for this field.
          $settings = $field->getThirdPartySettings('google_vision');
          if (!empty($settings['google_vision'])) {
            // Take first referenced vocabulary.
            $vid = reset($field->getSettings()['handler_settings']['target_bundles']);
            google_vision_file_entity_add_labels($entity, $field, $vid);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function google_vision_form_field_config_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $field_entity = $form_state->getFormObject()->getEntity();
  // If this field is reference to taxonomy vocabulary.
  if ($field_entity->getType() == 'entity_reference' && $field_entity->getSettings()['target_type'] == 'taxonomy_term') {
    $settings = $form_state->getFormObject()->getEntity()->getThirdPartySettings('google_vision');
    $form['google_vision'] = [
      '#type' => 'checkbox',
      '#title' => 'Enable Google Vision',
      '#default_value' => !empty($settings['google_vision']) ? $settings['google_vision'] : FALSE,
    ];

    $form['#entity_builders'][] = 'google_vision_form_field_config_form_taxonomy_builder';
  }

  if($field_entity->getType() == 'image') {
    $settings = $form_state->getFormObject()->getEntity()->getThirdPartySettings('google_vision');
    $form['safe_search'] = [
      '#type' => 'checkbox',
      '#title' => t('Enable Safe Search'),
      '#description' => t('Detects and avoids explicit contents.'),
      '#default_value' => !empty($settings['google_vision']) ? $settings['google_vision'] : FALSE,
    ];

    $form['#entity_builders'][] = 'google_vision_form_field_config_form_image_builder';
  }
}

/**
 * Form builder to save the settings for entity reference.
 */
function google_vision_form_field_config_form_taxonomy_builder($entity_type, FieldConfigInterface $type, &$form, FormStateInterface $form_state) {
  $type->setThirdPartySetting('google_vision', 'google_vision', $form_state->getValue('google_vision'));
}

/**
 * Implements hook_entity_type_alter().
 */
function google_vision_entity_type_alter(array &$entity_types) {
  $node = $entity_types['node'];
  $node->addConstraint('SafeSearch');
}

/**
 * Form builder to save the settings for images.
 */
function google_vision_form_field_config_form_image_builder($entity_type, FieldConfigInterface $type, &$form, FormStateInterface $form_state) {
  $type->setThirdPartySetting('google_vision', 'google_vision', $form_state->getValue('safe_search'));
}

/**
 * Try to get and add labels for the file entity.
 */
function google_vision_file_entity_add_labels($file, $field, $vid) {
  // Try to retrieve file URI.
  $file_uri = $file->getFileUri();
  if ($filepath = \Drupal::service('file_system')->realpath($file_uri)) {
    $data = \Drupal::service('google_vision.api')->labelDetection($filepath);
    // If we have retrieved labels.
    if (!empty($data['responses'][0]['labelAnnotations'])) {
      $labels = [];
      foreach ($data['responses'][0]['labelAnnotations'] as $item) {
        $labels[] = $item['description'];
      }

      // Get existing values from field.
      $values = $file->get($field->getName())->getValue();
      $taxonomy_term_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');

      // Try to find an existing terms by these labels.
      $query = \Drupal::database()->select('taxonomy_term_field_data', 'tfd');
      $query->fields('tfd', ['tid', 'name']);
      $query->condition('tfd.vid', $vid);
      $query->condition('tfd.name', $labels, 'IN');
      $existing_terms = $query->execute()->fetchAllKeyed();

      // Handle retrieved labels.
      foreach ($labels as $label) {
        // Use existing term.
        if ($existing_tid = array_search($label, $existing_terms)) {
          $already_have = FALSE;
          // If we already have this label in this field. Just skip.
          foreach ($values as $value) {
            if ($value['target_id'] == $existing_tid) {
              $already_have = TRUE;
            }
          }
          // Add existing label into field if we haven't it yet.
          if (!$already_have) {
            $values[] = ['target_id' => $existing_tid];
          }
        }
        // Create new term and add into field.
        else {
          $label_term = $taxonomy_term_storage->create([
            'name' => $label,
            'vid' => $vid
          ]);
          $label_term->enforceIsNew();
          $label_term->save();
          $values[] = ['target_id' => $label_term->id()];
        }
      }
      // Save collected values.
      $file->set($field->getName(), $values);
    }
  }
}
